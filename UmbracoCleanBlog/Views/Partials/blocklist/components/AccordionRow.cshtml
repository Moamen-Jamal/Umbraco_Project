
@inherits UmbracoViewPage<BlockListItem>

@{
    var row = (AccordionRow)Model.Content;
    var settings = (AccordionRowSettings)Model.Settings;
    if (settings?.Hide ?? false)
    {
        return;
    }
    if (row.AccordionItems == null || !row.AccordionItems.Any()) return;
    var accordionId = "accordion" + row.Key;
 }

<div class="row gx-4 gx-lg-5 pt-5 justify-content-center">
    <header class="text-center">
        <h2>@row.Title</h2>
        <p>@row.Description</p>
    </header>
    <div class="accordion" id="@accordionId">
    @{
        var index = 0;
        foreach (var item in row.AccordionItems)
        {
            var rowItems = (AccordionItem)item.Content;
            var rowSettings = (AccordionItemSettings)item.Settings;
            if (rowSettings.Hide)
            {
                continue;
            }
            var show = index == 0;
            var collapseId = accordionId + "-collapse-" + index;
            var headingId = accordionId + "-heading-" + index;
            <div class="accordion-item">
                @if (String.IsNullOrWhiteSpace(rowItems.Title))
                {
                    continue;
                }
                else
                {
                    <h2 class="accordion-header" id="@headingId">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="@show" aria-controls="@collapseId">
                            @rowItems.Title
                        </button>
                    </h2>
                }
                @if (rowItems.Content == null || String.IsNullOrWhiteSpace(rowItems.Content.ToString()))
                {
                    continue;
                }
                else
                {
                    <div id="@collapseId" class="accordion-collapse collapse @(show? "show" : null)" aria-labelledby="@headingId" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            @rowItems.Content
                        </div>
                    </div>
                }

            </div>
            index++;
        }

    }
    
    </div>
</div>